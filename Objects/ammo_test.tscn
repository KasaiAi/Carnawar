[gd_scene load_steps=6 format=3 uid="uid://1vyc384dp2ya"]

[ext_resource type="Texture2D" uid="uid://r15mxj0h1b82" path="res://Assets/shadow.png" id="2_q7bm2"]
[ext_resource type="Texture2D" uid="uid://brt1a6k6m5lk0" path="res://Assets/rect.png" id="3_isct7"]

[sub_resource type="GDScript" id="GDScript_jy5f8"]
script/source = "extends RigidBody2D

var enemy_group: String = \"neutral\"

@onready var Animator = $AnimationPlayer

@export var damaging = false
var throw_distance = Vector2.ZERO
var launch_point: Vector2
var direction: Vector2
var tween

var thrown
var speed: Vector3
var z_pos

#func _ready():
#	launch_point = global_position

func _process(_delta):
	if thrown:
		z_pos -= 1
#	move_and_collide(speed)
#	print(position)

func launch(from, towards, team = \"neutral\"):
	launch_point = from
	position = from
	direction = sign(towards)
	enemy_group = team
	speed = towards
	apply_impulse(towards)

func bounce():
#	throw_distance = throw_distance/2
#	if enemy_group == \"\":
#		create_tween().tween_property(self, \"position\", throw_distance, 0.4).as_relative()
#	else:
#		create_tween().tween_property(self, \"position\", throw_distance, 0.6).as_relative()
	enemy_group = \"neutral\"

# Pra um lançamento independente de animação
#func arc( direction, distance, height, time):
#	var tween = create_tween()
#	tween.tween_property(self, \"position:x\", direction * distance, time).as_relative()
#	tween.parallel().tween_property(self, \"position:y\", -height, time/2).as_relative().set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)
#	tween.tween_property(self, \"position:y\", height, time/2).as_relative().set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_IN)

func _on_collide(body):
	if not $Damaging.disabled:
		if body.is_in_group(\"ammo\"):
			body.Animator.play(\"bump\")
			body.create_tween().tween_property(body, \"position\", direction * 130, 0.6).as_relative()
		if body.is_in_group(enemy_group) and body.get_node(\"Attack\"):
			body.take_damage(direction)
	if body.name == \"Wall\":
		tween.kill()
		if $Damaging.disabled:
			position += Vector2(20, 20) * sign(throw_distance) * -1
		else:
			var rebound = round(launch_point.distance_to(position)	)
			rebound = throw_distance - (Vector2(rebound, rebound) * sign(throw_distance))
			#print(rebound)
			tween = create_tween()
			tween.tween_property(self, \"position\", rebound * -1, 1).as_relative()

func _on_entered(_area):
#	print(\"I'm in\")
	pass
"

[sub_resource type="CircleShape2D" id="CircleShape2D_rll70"]
radius = 30.0167

[sub_resource type="RectangleShape2D" id="RectangleShape2D_rxxye"]
size = Vector2(60, 10)

[node name="TestAmmo" type="RigidBody2D" groups=["ammo"]]
position = Vector2(130, 0)
collision_layer = 4
collision_mask = 15
max_contacts_reported = 1
contact_monitor = true
lock_rotation = true
script = SubResource("GDScript_jy5f8")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]

[node name="Shadow" type="Sprite2D" parent="."]
z_index = -1
scale = Vector2(0.363636, 0.363636)
texture = ExtResource("2_q7bm2")

[node name="Collision" type="CollisionShape2D" parent="."]
position = Vector2(0, -30)
shape = SubResource("CircleShape2D_rll70")

[node name="Sprite" type="Sprite2D" parent="Collision"]
visible = false
self_modulate = Color(1, 0.0470588, 1, 1)
scale = Vector2(0.396226, 0.468085)
texture = ExtResource("3_isct7")

[node name="WallLimit" type="Area2D" parent="."]
collision_layer = 8
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="WallLimit"]
position = Vector2(0, -5)
shape = SubResource("RectangleShape2D_rxxye")
disabled = true
